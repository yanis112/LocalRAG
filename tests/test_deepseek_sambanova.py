import os
import openai
from dotenv import load_dotenv

load_dotenv()

client = openai.OpenAI(
    api_key=os.getenv("SAMBANOVA_API_KEY"),
    base_url="https://api.sambanova.ai/v1",
)

response = client.chat.completions.create(
    model="DeepSeek-R1",
    messages=[{"role":"user","content":[{"type":"text","text":"write code to code a webapp similar to capcut with python backend on fastapi"}]},{"role":"system","content":[{"type":"text","text":"Here's a basic structure for a video editing web app using FastAPI. This example includes video processing, basic authentication, and a simple frontend:\n\n```python\n# main.py\nfrom fastapi import FastAPI, UploadFile, File, HTTPException, Depends\nfrom fastapi.security import OAuth2PasswordBearer\nfrom fastapi.staticfiles import StaticFiles\nfrom fastapi.middleware.cors import CORSMiddleware\nfrom moviepy.editor import VideoFileClip, TextClip, CompositeVideoClip\nfrom typing import List\nimport os\nimport uuid\nimport shutil\nfrom datetime import datetime\n\napp = FastAPI()\n\n# Configure CORS\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"*\"],\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\n\n# Mock user database and authentication\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\nusers_db = {}  # In production, use a real database\n\n# File storage configuration\nUPLOAD_DIR = \"uploads\"\nPROCESSED_DIR = \"processed\"\nos.makedirs(UPLOAD_DIR, exist_ok=True)\nos.makedirs(PROCESSED_DIR, exist_ok=True)\n\n# Mount static files\napp.mount(\"/static\", StaticFiles(directory=\"static\"), name=\"static\")\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    if token not in users_db:\nraise HTTPException(status_code=401, detail=\"Invalid authentication credentials\")\n    return users_db[token]\n\n@app.post(\"/register\")\nasync def register(username: str, password: str):\n    if username in users_db:\n        raise HTTPException(status_code=400, detail=\"Username already registered\")\n users_db[username] = {\"username\": username, \"password\": password}  # In production, hash passwords\n    return {\"message\": \"User registered successfully\"}\n\n@app.post(\"/upload\")\nasync def upload_video(file: UploadFile = File(...), user: dict = Depends(get_current_user)):\n    file_id = str(uuid.uuid4())\n    file_path = os.path.join(UPLOAD_DIR, file_id)\n    \n    with open(file_path, \"wb\") as buffer:\n       shutil.copyfileobj(file.file, buffer)\n    \n    return {\"file_id\": file_id, \"filename\": file.filename}\n\n@app.post(\"/process\")\nasync def process_video(\n    file_id: str,\n    operations: List[str],  # Example: [\"trim:0:5\", \"text:Hello:30\"]\n    user: dict = Depends(get_current_user)\n):\n    input_path = os.path.join(UPLOAD_DIR, file_id)\n    output_path = os.path.join(PROCESSED_DIR, f\"processed_{file_id}.mp4\")\n    \n    clip = VideoFileClip(input_path)\n    \n    # Apply processing operations\n    for op in operations:\n        if op.startswith(\"trim\"):\n            start, end = op.split(\":\")[1:]\n            clip = clip.subclip(float(start), float(end))\n        elif op.startswith(\"text\"):\n            text, duration = op.split(\":\")[1:]\n            txt_clip = TextClip(text, fontsize=70, color='white')\n            txt_clip = txt_clip.set_pos('center').set_duration(float(duration))\n            clip = CompositeVideoClip([clip, txt_clip])\n    \n   clip.write_videofile(output_path)\n    return {\"processed_url\": f\"/processed/processed_{file_id}.mp4\"}\n\n@app.get(\"/processed/{filename}\")\nasync def get_processed_file(filename: str):\n    return FileResponse(os.path.join(PROCESSED_DIR, filename))\n\nif __name__ == \"__main__\":\n    import uvicorn\n   uvicorn.run(app, host=\"0.0.0.0\", port=8000)\n```\n\nFrontend (static/index.html):\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Simple Video Editor</title>\n</head>\n<body>\n   <h1>Video Editor</h1>\n    \n    <div id=\"auth\">\n      <input type=\"text\" id=\"username\" placeholder=\"Username\">\n        <input type=\"password\" id=\"password\" placeholder=\"Password\">\n      <button onclick=\"register()\">Register</button>\n      <button onclick=\"login()\">Login</button>\n    </div>\n\n    <div id=\"editor\" style=\"display: none;\">\n        <input type=\"file\" id=\"videoInput\" accept=\"video/*\">\n       <button onclick=\"uploadVideo()\">Upload Video</button>\n        \n<div id=\"timeline\"></div>\n       <button onclick=\"addText()\">Add Text</button>\n<button onclick=\"processVideo()\">Process Video</button>\n        \n        <video id=\"preview\" controls style=\"width: 100%;\"></video>\n    </div>\n\n    <script>\n        let token = null;\n        let currentFileId = null;\n\n        async function register() {\n            const username = document.getElementById('username').value;\n            const password = document.getElementById('password').value;\n            const response = await fetch('/register', {\n                method: 'POST',\n                headers: {'Content-Type': 'application/json'},\n                body: JSON.stringify({username, password})\n            });\n            alert(await response.text());\n        }\n\n        async function login() {\n            const username = document.getElementById('username').value;\n            const password = document.getElementById('password').value;\n            const response = await fetch('/token', {\n                method: 'POST',\n                headers: {'Content-Type': 'application/x-www-form-urlencoded'},\nbody: `username=${username}&password=${password}`\n            });\n            const data = await response.json();\n            token = data.access_token;\n document.getElementById('editor').style.display = 'block';\n        }\n\n        async function uploadVideo() {\n            const file = document.getElementById('videoInput').files[0];\n            const formData = new FormData();\n            formData.append('file', file);\n            \n            const response = await fetch('/upload', {\n                method: 'POST',\n                headers: {'Authorization': `Bearer ${token}`},\n                body: formData\n            });\n            \n            const data = await response.json();\n            currentFileId = data.file_id;\n        }\n\n        async function processVideo() {\n            const response = await fetch('/process', {\n                method: 'POST',\n                headers: {\n                    'Authorization': `Bearer ${token}`,\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    file_id: currentFileId,\n                    operations: [\"text:Hello World:5\"]\n                })\n            });\n            \n            const data = await response.json();\n            document.getElementById('preview').src = data.processed_url;\n        }\n    </script>\n</body>\n</html>\n```\n\nTo run this application:\n\n1. Install requirements:\n```bash\npip install fastapi uvicorn python-multipart moviepy pillow\n```\n\n2. Run the server:\n```bash\nuvicorn main:app --reload\n```\n\nThis basic implementation includes:\n\n1. User authentication (simple version - for production use proper password hashing)\n2. Video upload functionality\n3. Basic video processing (trimming and text overlay)\n4. Simple frontend interface\n\nKey features to add for a more complete solution:\n\n1. Enhanced video editing features:\n   - Timeline editor\n   - Multiple tracks\n   - Transitions\n   - Audio editing\n   - Advanced effects\n\n2. Improved user management:\n   - Proper password hashing\n   - Email verification\n   - Session management\n\n3. Performance optimizations:\n   - Background task processing (Celery)\n   - Cloud storage integration\n   - Video streaming capabilities\n\n4. Additional technical features:\n   - Database integration (SQLAlchemy)\n   - Rate limiting\n   - API documentation\n   - Unit tests\n\nRemember that video processing is computationally intensive. For production use, consider:\n\n- Using a dedicated media processing server\n- Implementing background job queues\n- Using GPU acceleration\n- Optimizing video encoding settings\n- Implementing proper error handling and logging\n\nThis is a basic starting point - building a full-featured video editor would require significant additional development and infrastructure."}]}],
    temperature=0.1,
    top_p=0.1
)

print(response.choices[0].message.content)